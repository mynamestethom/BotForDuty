package com.example.BotForDuty.service;

import com.example.BotForDuty.config.BotConfig;
import com.example.BotForDuty.pojo.Person;
import com.example.BotForDuty.model.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Autowired
    private UserRepository userRepository;
    private final BotConfig botConfig;
    private final RegisterUserService registerService;


    public TelegramBot(BotConfig botConfig, RegisterUserService registerService) {
        this.botConfig = botConfig;
        List<BotCommand> listofCommands = new ArrayList<>();
        listofCommands.add(new BotCommand("/start" , "Start telegram bot"));
        listofCommands.add(new BotCommand("/register" , "Register user in bot"));
        listofCommands.add(new BotCommand("/help" , "Give command bot"));
        listofCommands.add(new BotCommand("/info" , "Give info for user"));
        listofCommands.add(new BotCommand("/duty" , "Get duty schedule"));
        try{
            this.execute(new SetMyCommands(listofCommands, new BotCommandScopeDefault() , null));
        }catch (TelegramApiException e){
            e.printStackTrace();
        }
        this.registerService = registerService;
    }


    @Override
    public void onUpdateReceived(Update update) {
        if( update.hasMessage() &&  update.getMessage().hasText() ){
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            if(registerService.isUserRegistrationProcess(chatId)){
                String responce = registerService.ProcessRoomNumber(update.getMessage());
                sendMessage(chatId , responce);
                return;
            }
            switch (messageText){
                case "/start":
                    informUser(chatId, update.getMessage().getChat().getFirstName());
                    break;
                case "/register":
                    String regMessage = registerService.RegisterUser(update.getMessage());
                    sendMessage(chatId,regMessage);
                    break;
                case "/info":
                    String infoMessage = registerService.getInformForUser(update.getMessage().getChatId());
                    sendMessage(chatId,infoMessage);
                    break;
                case "/help":
                    sendHellpMes(chatId);
                    break;
                case "/duty":
                    sendSchedulePhoto(chatId);
                    break;
            }
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    public void registerUser(Message msg){
        if(userRepository.findById(msg.getChatId()).isEmpty()){
            Person person = new Person();
            var chatId = msg.getChatId();
            person.setName(msg.getChat().getUserName());
            person.setChatId(chatId);
            person.setNumber_room(0);
            userRepository.save(person);
        }
    }

    public void informUser(long chatId, String name){
        String answer = "üëã –ü—Ä–∏–≤–µ—Ç, " + name + "!\n\n" +
                "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π \n" +
                "üè† <b>–û–±—â–µ–∂–∏—Ç–∏—è ‚Ññ5 –°–ì 1 (3 —ç—Ç–∞–∂) –¢–ï–°–¢ –†–ï–ñ–ò–ú</b>!\n\n" +
                "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n" +
                "‚Ä¢ üìÖ –£–∑–Ω–∞—Ç—å –æ —Å–≤–æ–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö –Ω–∞ –∫—É—Ö–Ω–µ\n" +
                "‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É–±–æ—Ä–∫–∞—Ö\n" +
                "‚Ä¢ ‚ÑπÔ∏è –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤–∞–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —ç—Ç–∞–∂–∞\n\n" +"" +
                "<b>–£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>/help</code></b>\n\n" +
                "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É –∂–∏–∑–Ω—å –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –±–æ–ª–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π!";
        sendMessage(chatId,answer);
    }

    public void sendHellpMes(long chatId){
        String helpText = "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>:\n\n" +
                "üè† <b>–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ5 –°–ì 1 (3 —ç—Ç–∞–∂)</b>\n\n" +
                "‚ñ´Ô∏è <code>/start</code> ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                "‚ñ´Ô∏è <code>/register</code> ‚Äì üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–¥–ª—è –Ω–æ–≤—ã—Ö –∂–∏—Ç–µ–ª–µ–π)\n" +
                "‚ñ´Ô∏è <code>/myinfo</code> ‚Äì üë§ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n" +
                "‚ñ´Ô∏è <code>/help</code> ‚Äì ‚ùì –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n" +
                "<i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ —ç—Ç–∞–∂–∞!</i>";
        sendMessage(chatId,helpText);
    }

    public void sendMessage(long chatId, String textSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textSend);
        message.setParseMode("HTML");
        executeMess(message);
    }

    private void sendSchedulePhoto(long chatId) {
        try {
            ClassPathResource resource = new ClassPathResource("duty_schedule.png");
            InputStream inputStream = resource.getInputStream();

            SendPhoto sendPhoto = new SendPhoto();
            sendPhoto.setChatId(String.valueOf(chatId));
            sendPhoto.setPhoto(new InputFile(inputStream, "schedule.jpg"));
            sendPhoto.setCaption("üìÖ –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –Ω–∞ –∫—É—Ö–Ω–µ");

            execute(sendPhoto);
        } catch (IOException e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }


    public void executeMess(SendMessage message){
        try{
            execute(message);
        }catch (TelegramApiException e){
            e.printStackTrace();
        }
    }
}
